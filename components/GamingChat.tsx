'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import axios from 'axios'

const checkMessageCensorship = async (message: string): Promise<boolean> => {
  try {
    const response = await axios.post('/api/censor', { text: message })
    console.log(response.data)
    return response.data.value
  } catch (error) {
    console.error('Error calling censorship API:', error)
    return false
  }
}

interface ChatMessage {
  id: number
  user: string
  message: string
  isCensored: boolean
}

const dummyUsers = ['AutoGenerated-1', 'AutoGenerated-2', 'AutoGenerated-3', 'AutoGenerated-4']
const dummyMessages = [
  'GG!',
  'Nice shot!',
  'Watch out!',
  'Need backup!',
  'Let\'s go!',
  'Well played!',
  'Ouch!',
  'LOL',
  'We Shall Win this guys!'
]

export default function GamingChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [username, setUsername] = useState('You')
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const timer = setInterval(() => {
      const newMessage: ChatMessage = {
        id: Date.now(),
        user: dummyUsers[Math.floor(Math.random() * dummyUsers.length)],
        message: dummyMessages[Math.floor(Math.random() * dummyMessages.length)],
        isCensored: false,
      }
      setMessages(prevMessages => [...prevMessages, newMessage])
    }, 1500)

    return () => clearInterval(timer)
  }, [])

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const shouldCensor = await checkMessageCensorship(inputMessage)
    const newMessage: ChatMessage = {
      id: Date.now(),
      user: username,
      message: inputMessage,
      isCensored: shouldCensor,
    }

    setMessages(prevMessages => [...prevMessages, newMessage])
    setInputMessage('')
  }

  return (
    <div className="w-full max-w-md mx-auto bg-background border rounded-lg shadow-lg">
      <div className="p-4 border-b">
        <h2 className="text-lg font-semibold">Game Chat</h2>
      </div>
      <ScrollArea className="h-[400px] p-4">
        {messages.map((msg) => (
          <div key={msg.id} className="mb-2">
            <span className="font-bold">{msg.user}: </span>
            <span>{msg.isCensored ? '*** [censored] ***' : msg.message}</span>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </ScrollArea>
      <form onSubmit={handleSubmit} className="p-4 border-t">
        <div className="flex space-x-2">
          <Input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="Type your message..."
            className="flex-grow"
          />
          <Button type="submit">Send</Button>
        </div>
      </form>
    </div>
  )
}

